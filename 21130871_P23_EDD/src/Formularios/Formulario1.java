/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author migue
 */
public class Formulario1 extends javax.swing.JFrame {

    /**
     * Creates new form Formulario1
     */
    Stack<Character> outputStack = new Stack();
    Stack<Character> operatorStack = new Stack();
    
    Queue<Character> cola = new LinkedList<>();
    
    HashMap<Character, Integer> jerarchyMap = new HashMap<>();    
    
    public Formulario1() {
        initComponents();
        
        //Para las jerarquías fijas
        jerarchyMap.put('^', 3);
        jerarchyMap.put('/', 2);
        jerarchyMap.put('*', 2);
        jerarchyMap.put('+', 1);
        jerarchyMap.put('-', 1);
        jerarchyMap.put('(', 0);
        jerarchyMap.put(')', 0);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTFExpresionIn = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButtonPreFix = new javax.swing.JButton();
        jButtonPostFix = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabelResult = new javax.swing.JLabel();
        jButtonBorrar = new javax.swing.JButton();
        jLabelPuebaCola = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("NOTACIÓN PREFIJA Y SUBFIJA");

        jTFExpresionIn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Notación infija:");

        jButtonPreFix.setText("NOTACIÓN INFIJA");
        jButtonPreFix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPreFixActionPerformed(evt);
            }
        });

        jButtonPostFix.setText("NOTACION POSFIJA");
        jButtonPostFix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPostFixActionPerformed(evt);
            }
        });

        jLabel2.setText("Resultado:");

        jLabelResult.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jButtonBorrar.setText("Borrar");
        jButtonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(jLabelResult, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonPreFix)
                                .addGap(33, 33, 33)
                                .addComponent(jButtonPostFix))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel2))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTFExpresionIn, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(71, 71, 71)))))
                .addContainerGap(128, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButtonBorrar)
                .addGap(27, 27, 27))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(382, 382, 382)
                .addComponent(jLabelPuebaCola, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTFExpresionIn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPreFix)
                    .addComponent(jButtonPostFix))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelResult, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelPuebaCola, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(jButtonBorrar)
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPreFixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPreFixActionPerformed
        // TODO add your handling code here
        try{
        getInfix(jTFExpresionIn);
        infijaAPrefija();
        String resultado = "";
        while(!cola.isEmpty()){
            resultado += cola.remove();
        }
        jLabelResult.setText(resultado);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_jButtonPreFixActionPerformed

    private void jButtonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBorrarActionPerformed
        // TODO add your handling code here:
        resetear();
    }//GEN-LAST:event_jButtonBorrarActionPerformed

    private void jButtonPostFixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPostFixActionPerformed
        // TODO add your handling code here:
        try{
            getInfix(jTFExpresionIn);
            infijaAPostfija();
            String resultado = "";
            while(!cola.isEmpty()){
            resultado += cola.remove();
        }
        jLabelResult.setText(resultado);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_jButtonPostFixActionPerformed

    public void resetear(){
        operatorStack.clear();
        cola.clear();
        outputStack.clear();
    }
    public void infijaAPrefija(){
        if(entradaValida()){
            invertirCola(cola);
            int tam = cola.size();
            for(int i = 0; i < tam; i++){
                char c = cola.remove();
                switch (c) {
                    case '(':
                        cola.add(')');
                        break;
                    case ')':
                        cola.add('(');
                        break;
                    default:
                        cola.add(c);
                        break;
                }
            }
            sacarOperadoresPrefijo();
            while(!outputStack.isEmpty())
                cola.add(outputStack.pop());
        }
    }
    
    public void infijaAPostfija(){
        if(entradaValida()){
           
            sacarOperadoresPosfijo();
            while(!outputStack.isEmpty())
                cola.add(outputStack.pop());
        }
    }
    
    public void sacarOperadoresPrefijo(){
            int tamañoCola = cola.size();
            for(int i = 0; i < tamañoCola; i++){
                char c = cola.remove();
                boolean isAlphabetic = (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
                boolean isNumber = (c >= '0' && c <= '9');

                if(isAlphabetic || isNumber){
                    outputStack.add(c);
                }
                else if(c == '(') {
                while(!operatorStack.isEmpty())
                        outputStack.add(operatorStack.pop());
                }// CHECAR ESTO
                else if(c == ')'){
                }
                else{
                    if(!operatorStack.empty()){
                    int jerarqActual = jerarchyMap.get(operatorStack.peek());
                    if(jerarchyMap.get(c) > jerarqActual){
                        operatorStack.add(c);
                    }
                    else if(jerarchyMap.get(c) <= jerarqActual){
                        while(jerarchyMap.get(c) <= jerarqActual && !operatorStack.isEmpty()){
                            outputStack.add(operatorStack.pop());
                        }
                        operatorStack.add(c);
                    }
                    
                    }else operatorStack.add(c);
                }
            }
            while(!operatorStack.isEmpty()){
                outputStack.add(operatorStack.pop());
            }
    }
    
    public void sacarOperadoresPosfijo(){
            int tamañoCola = cola.size();
            for(int i = 0; i < tamañoCola; i++){
                char c = cola.remove();
                boolean isAlphabetic = (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
                boolean isNumber = (c >= '0' && c <= '9');

                if(isAlphabetic || isNumber){
                    outputStack.add(c);
                }
                else if(c == '(') {
                }// CHECAR ESTO
                else if(c == ')'){
                    while(!operatorStack.isEmpty())
                        outputStack.add(operatorStack.pop());
                }
                else{
                    if(!operatorStack.empty()){
                    int jerarqActual = jerarchyMap.get(operatorStack.peek());
                    if(jerarchyMap.get(c) > jerarqActual){
                        operatorStack.add(c);
                    }
                    else if(jerarchyMap.get(c) <= jerarqActual){
                        while(jerarchyMap.get(c) <= jerarqActual && !operatorStack.isEmpty()){
                            outputStack.add(operatorStack.pop());
                        }
                        operatorStack.add(c);
                    }
                    
                    }else operatorStack.add(c);
                }
            }
            while(!operatorStack.isEmpty()){
                outputStack.add(operatorStack.pop());
            }
            
            invertirStack(outputStack);
    }
    
    public boolean entradaValida(){
        int contadorPA = 0, contadorPC = 0;
        
        for(int i = 0; i < cola.size(); i++){
            char elemento = cola.remove();
            if(elemento == '(') contadorPA++;
            else if(elemento == ')') contadorPC++;
            
            cola.add(elemento);
        }
        if(contadorPA != contadorPC){
            JOptionPane.showMessageDialog(null, "Entrada no valida");
            return false;
        }
        else return true;
    }
    
    public void invertirCola(Queue<Character> cola){
        if(cola.size()>=2){
            Stack<Character> auxPila = new Stack();
            
            while(!cola.isEmpty()){
                auxPila.push(cola.remove());
            }
            
            while(!auxPila.isEmpty()){
                cola.add(auxPila.pop());
            }
        }else
            JOptionPane.showMessageDialog(null, "Se necesitan al menos 2 elementos en la cola)");
            
    }
    
    public void invertirStack(Stack original){
        if(!original.empty()){
            Stack auxStack = new Stack();
            Stack auxStack1 = new Stack();
            
            while(!original.isEmpty())
                auxStack.push(original.pop());
            
            while(!auxStack.isEmpty())
                auxStack1.push(auxStack.pop());
            
            while(!auxStack1.isEmpty())
                original.push(auxStack1.pop());
        }
        else{
            JOptionPane.showMessageDialog(null, "La pila esta vacia");
        }
    }

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Formulario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Formulario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Formulario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Formulario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Formulario1().setVisible(true);
            }
        });
    }
    
    private void getInfix(JTextField jTF){
        try{
        char[] carr = jTF.getText().toCharArray();
        for(int i = 0; i < carr.length; i++){
          cola.add(carr[i]);
        }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBorrar;
    private javax.swing.JButton jButtonPostFix;
    private javax.swing.JButton jButtonPreFix;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelPuebaCola;
    private javax.swing.JLabel jLabelResult;
    private javax.swing.JTextField jTFExpresionIn;
    // End of variables declaration//GEN-END:variables
}
